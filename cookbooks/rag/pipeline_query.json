{
    "name": "rag-query",
    "nodes": [
        {
            "node": {
                "created": "Sat, 02 Dec 2023 00:17:04 GMT",
                "extras": {
                    "model": "instructor_xl",
                    "vector_size": 768
                },
                "name": "mastiff",
                "node_id": "fHK7mO3IbeNkn",
                "processor": "embedding",
                "template_id": "xwBVNN20iSfZG",
                "uid": "r2lAJyPcFb8owj6Ks"
            },
            "template": {
                "created": "Sat, 02 Dec 2023 00:16:58 GMT",
                "extras": {
                    "model": "instructor_xl",
                    "vector_size": 768
                },
                "input_fields": [
                    {
                        "name": "query",
                        "type": "strings"
                    }
                ],
                "name": "blazing",
                "output_fields": [
                    {
                        "name": "query_embedding",
                        "type": "vectors"
                    }
                ],
                "processor": "embedding",
                "template_id": "xwBVNN20iSfZG",
                "text": "{# Use this template to drive a Instructor XL embedding node processor! #}\n\n{# Input Fields #}\ninput_fields = [{'name': \"query\", 'type': \"strings\"}]\n\n{# Output Fields #}\noutput_fields = [{'name': \"query_embedding\", 'type': \"vectors\"}]\n\n{# Extras for embedding are vector_size: <size> and model: [instructor_large or instructor_xl] #}\nextras = {'vector_size': 768, 'model': \"instructor_xl\"}",
                "uid": "r2lAJyPcFb8owj6Ks"
            }
        },
        {
            "node": {
                "created": "Sat, 02 Dec 2023 00:16:28 GMT",
                "extras": {
                    "processor": "read_fb",
                    "sql": "SELECT TOP(20) chunks, cosine_distance({{query_embedding[0]}}, chunks_embedding) AS distance FROM {{table}} ORDER BY distance ASC;",
                    "table": "rag"
                },
                "name": "ant",
                "node_id": "YfRQIm1qv0zxk",
                "processor": "read_fb",
                "template_id": "1yEutS6OBhZGK",
                "uid": "r2lAJyPcFb8owj6Ks"
            },
            "template": {
                "created": "Sat, 02 Dec 2023 00:16:15 GMT",
                "extras": {
                    "processor": "read_fb",
                    "sql": "SELECT TOP(20) chunks, cosine_distance({{query_embedding[0]}}, chunks_embedding) AS distance FROM {{table}} ORDER BY distance ASC;",
                    "table": null
                },
                "input_fields": [
                    {
                        "name": "query_embedding",
                        "type": "vectors"
                    }
                ],
                "name": "didactic",
                "output_fields": [
                    {
                        "name": "chunks",
                        "type": "strings"
                    }
                ],
                "processor": "read_fb",
                "template_id": "1yEutS6OBhZGK",
                "text": "{# Use this template to read from FeatureBase with SQL #}\n\n{# Input Fields #}\ninput_fields = [{\"name\": \"query_embedding\", \"type\": \"vectors\"}]\n\n{# Output Fields #}\noutput_fields = [{\"name\": \"chunks\", \"type\": \"strings\"}]\n\n{# Extras Fields #}\n{# SQL takes query_embedding and runs it against chunks_embeddings in the DB #}\nextras = {\"table\": None, \"processor\": \"read_fb\", \"sql\": \"SELECT TOP(20) chunks, cosine_distance({{query_embedding[0]}}, chunks_embedding) AS distance FROM {{table}} ORDER BY distance ASC;\"}",
                "uid": "r2lAJyPcFb8owj6Ks"
            }
        },
        {
            "node": {
                "created": "Fri, 01 Dec 2023 17:20:36 GMT",
                "extras": {
                    "callback_token": "[callback_token]",
                    "callback_uri": "https://mitta.ai/annoying-shrew-of-expertise/callback?token={{callback_token}}",
                    "my_token": "[my_token]",
                    "processor": "callback"
                },
                "name": "dormouse",
                "node_id": "zduySYAoGrbk7",
                "processor": "callback",
                "template_id": "eiHWRSVe8b4BT",
                "uid": "r2lAJyPcFb8owj6Ks"
            },
            "template": {
                "created": "Fri, 01 Dec 2023 17:20:36 GMT",
                "extras": {
                    "callback_token": "[callback_token]",
                    "callback_uri": "[callback_uri]",
                    "my_token": "[my_token]",
                    "processor": "callback"
                },
                "input_fields": null,
                "name": "pompous",
                "output_fields": [
                    {
                        "name": "chunks",
                        "type": "strings"
                    }
                ],
                "processor": "callback",
                "template_id": "eiHWRSVe8b4BT",
                "text": "{# Welcome to the SlothAI Templating System. #}\n\n{# This template will be used to create a callback node. #}\n\n{# Next Tasks #}\n{# 1. Review this callback template then click on the 'Save' button. #}\n{# 2. Create a new template, then click the `Choose Template` pulldown and select `Generate random words'. #}\n\n{# Extras that have [callback_uri] or [callback_token] will be auto populated with local callback info. #}\nextras = {'processor': \"callback\", 'callback_uri': \"[callback_uri]\", 'callback_token': \"[callback_token]\", 'my_token': None}\n\n{# Any output fields we define will be passed to the callback endpoint. #}\n{# If output fields is empty, all data will be sent to the callback endpoint. #}\noutput_fields = [{\"name\": \"chunks\", \"type\": \"strings\"}]",
                "uid": "r2lAJyPcFb8owj6Ks"
            }
        }
    ],
    "pipe_id": "HElmFq0Vsvr0F"
}